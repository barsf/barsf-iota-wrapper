<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 minutes" packagingData="true">
	<!--用于区分不同应用程序的记录-->
	<contextName>barsf-iri</contextName>
	<property name="LOG_HOME" value="logs"/>

	<!--控制台-->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger输出日志的logger名 %msg：日志消息，%n是换行符 -->
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>
			<!--解决乱码问题-->
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!--滚动文件-->
	<appender name="infoFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/log.%d{yyyy-MM-dd}.log</fileNamePattern>
			<maxHistory>30</maxHistory><!--保存最近30天的日志-->
		</rollingPolicy>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>
		</encoder>
	</appender>

	<!--滚动文件-->
	<appender name="errorFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>error</level>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
			<maxHistory>30</maxHistory><!--保存最近30天的日志-->
		</rollingPolicy>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="debugFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>DENY</onMatch>
			<onMismatch>NEUTRAL</onMismatch>
		</filter>

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>DENY</onMatch>
			<onMismatch>NEUTRAL</onMismatch>
		</filter>

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>DENY</onMatch>
			<onMismatch>NEUTRAL</onMismatch>
		</filter>


		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>debug</level>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/debug.%d{yyyy-MM-dd}.log</fileNamePattern>
			<maxHistory>30</maxHistory><!--保存最近30天的日志-->
		</rollingPolicy>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern>
		</encoder>
	</appender>


	<!--将日志输出到logstack-->
	<!--<appender name="logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>47.93.173.81:7002</destination>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <charset>UTF-8</charset>
        </encoder>
        <keepAliveDuration>5 minutes</keepAliveDuration>
    </appender>-->

	<!--这里如果是info，spring、mybatis等框架则不会输出：TRACE < DEBUG < INFO <  WARN < ERROR-->
	<!--root是所有logger的祖先，均继承root，如果某一个自定义的logger没有指定level，就会寻找
    父logger看有没有指定级别，直到找到root。-->
	<root level="debug">
		<!--<appender-ref ref="stdout"/>-->
		<appender-ref ref="infoFile"/>
		<appender-ref ref="errorFile"/>
		<appender-ref ref="debugFile"/>
	</root>

	<!--  root level="INFO"> <appender-ref ref="STDOUT" /> </root> -->
</configuration>
